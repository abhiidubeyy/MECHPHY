#include <stdint.h>

#define BIT_COUNT 16   // 8 data bits + 8 inverse bits

//-------------------------------------------------------------------
// RCC and Timer Registers
//-------------------------------------------------------------------
volatile uint32_t *RCC_AHB2ENR = (uint32_t *)0x4002104c;  // GPIOA clock enable
volatile uint32_t *RCC_APB1ENR = (uint32_t *)0x40021058;  // TIM2 clock enable

volatile uint32_t *TIM2_CR1    = (uint32_t *)0x40000000;
volatile uint32_t *TIM2DIER    = (uint32_t *)0x4000000c;
volatile uint32_t *TIM2_IFR    = (uint32_t *)0x40000010;
volatile uint32_t *TIM2CCMR   = (uint32_t *)0x40000018;
volatile uint32_t *TIM2CCER   = (uint32_t *)0x40000020;
volatile uint32_t *TIM2_PSC    = (uint32_t *)0x40000028;
volatile uint32_t *TIM2_ARR    = (uint32_t *)0x4000002c;
volatile uint32_t *TIM2CCR1   = (uint32_t *)0x40000034;

//-------------------------------------------------------------------
// GPIOA Registers
//-------------------------------------------------------------------
// PA0: LED output
// PA5: TIM2_CH1 input capture (from IR receiver module)
volatile uint32_t *GA_MODER   = (uint32_t *)0x48000000;
volatile uint32_t *GA_PUPDR   = (uint32_t *)0x4800000c;
volatile uint32_t *GA_AFRL    = (uint32_t *)0x48000020;
volatile uint32_t *GA_OPDR    = (uint32_t *)0x48000014;

//-------------------------------------------------------------------
// NVIC Register (for TIM2 interrupt)
//-------------------------------------------------------------------
volatile uint32_t *NVICISER   = (uint32_t *)0xE000E100;

//-------------------------------------------------------------------
// Global Variables for Pulse Decoding
//-------------------------------------------------------------------
volatile uint16_t received[BIT_COUNT];  // Array to store the 16 received bits
volatile uint16_t previous_edge = 0x0000;
volatile uint16_t current_edge  = 0x0000;
volatile uint8_t  change_flag   = 0;
volatile uint16_t time;
volatile uint8_t  ind = 0;              // Bit index into received[]
volatile uint8_t  header = 0;           // Flag indicating that a valid header pulse was detected

//-------------------------------------------------------------------
// Main Function
//-------------------------------------------------------------------
int main(void)
{
    //---------------------------
    // 1. Enable Clocks
    //---------------------------
    *RCC_AHB2ENR |= 0x01;    // Enable GPIOA clock (bit 0)
    *RCC_APB1ENR |= 0x01;    // Enable TIM2 clock (bit 0)

    //---------------------------
    // 2. Configure GPIOA
    //---------------------------
    // Configure PA5 as alternate function input (for TIM2_CH1)
    // and PA0 as a general-purpose output (to drive the LED).
    //
    // For simplicity, the following configuration uses magic numbers.
    // (Ensure that the correct pins and alternate functions match your hardware.)
    *GA_MODER &= ~(0x0F << 10);  // Clear mode bits for PA5 (pin5 uses bits 10-11)
    *GA_MODER &= ~(0x0F);        // Clear mode bits for PA0 (pin0 uses bits 0-1)
    *GA_MODER |= (0x02 << 10) | (0x01);  // Set PA5 to alternate function (10) and PA0 to output (01)

    // Configure PA5 with a pull-up resistor
    *GA_PUPDR |= (0x01 << 10);

    // Set PA5 alternate function to AF1 (TIM2_CH1)
    // PA5 is controlled by AFRL bits [23:20]
    *GA_AFRL |= (0x01 << 20);

    //---------------------------
    // 3. Configure TIM2 for Input Capture
    //---------------------------
    // In TIM2_CCMR1: Set CC1S bits (bits [1:0]) to 01 to select TI1 as input.
    *TIM2CCMR |= 0x01;

    // In TIM2_CCER: Enable capture on channel 1 by setting CC1E (bit 0).
    // Also, ensure polarity is rising edge (CC1P = 0) and no complementary output.
    *TIM2CCER |= 0x03;   // Enable capture (CC1E) and (if needed) set additional bits
    *TIM2CCER &= ~(0x08);

    // Set Auto-Reload Register to define the timer period.
    *TIM2_ARR = 0xEA5F;
    // Set Prescaler to 0 for maximum resolution.
    *TIM2_PSC = 0x00;

    // Enable Capture/Compare Interrupt for channel 1 (CC1IE is bit 1 in TIM2DIER).
    *TIM2DIER |= 0x02;

    // Start TIM2: Set ARPE (bit 7) and CEN (bit 0) in TIM2_CR1.
    *TIM2_CR1 |= (0x01 << 7) | 0x01;

    // Enable TIM2 interrupt in NVIC (assuming TIM2 IRQ corresponds to bit 28).
    *NVICISER |= (0x01 << 28);

    //---------------------------
    // 4. Main Loop: Receive and Validate IR Pulses
    //---------------------------
    while (1)
    {
        // Wait until a new capture event is available (set in TIM2_IRQHandler)
        while (!change_flag);
        change_flag = 0;

        // Compute the pulse width (in timer counts)
        if (previous_edge < current_edge)
            time = current_edge - previous_edge;
        else
            time = (0xEA5F - previous_edge) + current_edge;

        // Header detection: if header not yet detected...
        if (header == 0)
        {
            // Check if the pulse width falls within the header range.
            // (Adjust these hexadecimal values as needed.)
            if (time >= 0xCB20 && time <= 0xDAC0)
            {
                header = 1;  // Valid header detected.
                ind = 0;     // Reset bit index.
                continue;
            }
            else
            {
                header = 0;
                ind = 0;
                continue;
            }
        }
        else
        {
            // Data bit decoding:
            // If the pulse width is within the range for a logical '0'
            if (time >= 0xFA0 && time <= 0x1770)
            {
                received[ind] = 0;
            }
            // If the pulse width is within the range for a logical '1'
            else if (time >= 0x20D0 && time <= 0x28A0)
            {
                received[ind] = 1;
            }

            ind++;

            // When 16 bits have been received, validate the transmission.
            if (ind == BIT_COUNT)
            {
                uint8_t valid = 1;
                // For each bit in the first 8, the corresponding bit in the next 8 should be its inverse.
                for (uint8_t i = 0; i < BIT_COUNT / 2; i++)
                {
                    if (received[i] == received[i + BIT_COUNT / 2])
                    {
                        valid = 0;
                        break;
                    }
                }
                // Only blink the LED if the received code is valid.
                if (valid)
                {
                    *GA_OPDR |= 0x01;      // Turn LED on (set PA0 high)
                    for (volatile int i = 0; i < 100000; i++); // Simple delay loop
                    *GA_OPDR &= ~(0x01);    // Turn LED off
                }
                // Reset for the next message reception.
                header = 0;
                ind = 0;
                continue;
            }
        }
    }

    return 0;
}

//-------------------------------------------------------------------
// TIM2 Interrupt Handler (Input Capture)
//-------------------------------------------------------------------
void TIM2_IRQHandler(void)
{
    // Set flag to indicate a capture event.
    change_flag = 1;
    // Update the previous and current capture values.
    previous_edge = current_edge;
    current_edge = *TIM2CCR1;
    // Clear the capture/compare interrupt flag (assuming CC1IF is bit 1).
    *TIM2_IFR &= ~(0x02);
}
